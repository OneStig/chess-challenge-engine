using System;
using System.IO;
using System.Numerics;
using ChessChallenge.API;


namespace ChessChallenge.Application
{
	public static class Tuner
	{
		// Problably more aptly called encoder
		static long[] raw_mgeg_table = {281479271743489000, 281479271743489000, 309064394990748743, 300620111327921117, 279790451949700103, 299775385749488596, 277538677904507901, 287953247748555729, 273879438782039028, 286264372118029263, 274160905168880606, 282323709560685532, 271627643262338001, 277257250174534610, 281479271743489000, 281479271743489000, 234472568378491831, 298648828710028157, 260931422354670604, 287953462496265175, 268250205538550825, 305123723842749460, 278946069968782365, 291894142235706366, 277820114227168245, 289360652697142240, 275005308625224690, 286827369317073880, 273316269784826853, 281197874075272149, 251924308990755783, 276694076879078353, 273316514593375171, 274442216937554912, 274160991067309019, 289923774449058745, 276975831032726544, 291331110679151590, 280353393312728090, 291894004796031974, 279790477718651906, 291049472491914220, 281479336168981495, 285420037382734834, 282605236075889640, 283449686776939497, 272190584626217939, 277820045504086995, 290486651388953627, 299212233932997651, 289079233557431334, 303997557644854292, 280071978466018316, 286264539625096184, 274723825058251778, 288234821507875796, 271346060911969255, 284012516469507025, 268812790416278487, 282323696673293255, 269094304047432671, 281197844011025313, 276131191351477241, 285982901433205710, 273597972397491188, 298086484350796821, 274723704798381033, 276975916931089438, 277820024032265200, 289642286589346849, 273879331407135704, 281197869781091305, 278945885283353566, 280916304610395109, 277538630658753510, 280071905450787821, 271627613199598570, 283731135981487081, 281197719456777202, 277257039716615094, 263183497042592729, 265716527018935285, 289642041771820001, 279227454747444171, 278946100032439256, 275849797980521426, 276694111239275469, 273034915067069380, 267686993587930049, 268531233834075061, 277538561938555834, 269094243918218189, 281760776784446376, 269375779026043888, 277257301712438194, 283730951299662838,
							 281479271743489000, 281479271743489000, 331582560637682798, 322856660266452131, 307938349056590891, 297242098077926460, 290486574078297069, 280916338971051001, 285138485095236577, 279508912546972647, 282605201714709481, 281479250268586976, 285138480800990194, 285138446440858593, 281479271743489000, 281479271743489000, 265153559884661708, 272753431497212805, 274442362964345830, 278945889577337780, 274723786403742705, 281197758110827455, 276694210025751550, 287671768476287958, 276412696393942017, 285982944385565654, 275005334394176503, 284294008624382930, 269657236821640163, 280916235889214396, 273316278374040537, 275286744943166376, 277538531874505696, 279508908250694608, 279227454750393308, 280634790978520026, 282042187337171943, 280916347559871468, 280634885468849137, 285419964367307754, 279790434768978939, 283449639529939935, 278101559138583538, 285138459325170649, 277538544759669735, 282605132994642893, 275005308622930915, 278945928233288663, 285138489391580151, 284857023004148717, 284575552322733043, 280634859698783211, 283449626645693421, 282605158765102053, 282605184536085481, 282042225991812074, 282323718148981740, 280071871089607645, 280353371836318695, 279508895366382552, 279790396113421290, 278945958297666533, 278946005543224295, 280071841025622996, 278946091443815427, 289079177719710716, 276694283040850961, 297804927768855528, 275849797979669529, 294708745973990385, 282323791164474389, 297523517218423820, 276412842423026711, 290205142052963327, 276975556152984558, 284012619548984301, 275286723469640664, 276975573329511368, 272190477251511229, 280071759419671487, 260649973141865430, 278383111424443351, 278101645038322681, 286264509557834739, 284294094526546935, 287108964554114037, 279227566420657155, 288797762873590763, 276412704984204288, 289079194899514333, 276131234301805565, 287953264927769567, 273879400127923189, 285419938596979671, 266560951947559901, 273597912264475581};
		static int[] value_mg = { 82, 237, 365, 477, 1025, 12000 };
		static int[] value_eg = { 94, 281, 297, 512, 936, 12000 };

		// value of pieces by game phase from PeSTO
		static int[] value_gp = { 0, 1, 1, 2, 4, 0 };

		static short[] mg_table = {
			
				0,   0,   0,   0,   0,   0,  0,   0,
				98, 134,  61,  95,  68, 126, 34, -11,
				-6,   7,  26,  31,  65,  56, 25, -20,
				-14,  13,   6,  21,  23,  12, 17, -23,
				-27,  -2,  -5,  12,  17,   6, 10, -25,
				-26,  -4,  -4, -10,   3,   3, 33, -12,
				-35,  -1, -20, -23, -15,  24, 38, -22,
				0,   0,   0,   0,   0,   0,  0,   0,

				-167, -89, -34, -49,  61, -97, -15, -107,
				-73, -41,  72,  36,  23,  62,   7,  -17,
				-47,  60,  37,  65,  84, 129,  73,   44,
				-9,  17,  19,  53,  37,  69,  18,   22,
				-13,   4,  16,  13,  28,  19,  21,   -8,
				-23,  -9,  12,  10,  19,  17,  25,  -16,
				-29, -53, -12,  -3,  -1,  18, -14,  -19,
				-105, -21, -58, -33, -17, -28, -19,  -23,

				-29,   4, -82, -37, -25, -42,   7,  -8,
				-26,  16, -18, -13,  30,  59,  18, -47,
				-16,  37,  43,  40,  35,  50,  37,  -2,
				-4,   5,  19,  50,  37,  37,   7,  -2,
				-6,  13,  13,  26,  34,  12,  10,   4,
				0,  15,  15,  15,  14,  27,  18,  10,
				4,  15,  16,   0,   7,  21,  33,   1,
				-33,  -3, -14, -21, -13, -12, -39, -21,

				32,  42,  32,  51, 63,  9,  31,  43,
				27,  32,  58,  62, 80, 67,  26,  44,
				-5,  19,  26,  36, 17, 45,  61,  16,
				-24, -11,   7,  26, 24, 35,  -8, -20,
				-36, -26, -12,  -1,  9, -7,   6, -23,
				-45, -25, -16, -17,  3,  0,  -5, -33,
				-44, -16, -20,  -9, -1, 11,  -6, -71,
				-19, -13,   1,  17, 16,  7, -37, -26,

				-28,   0,  29,  12,  59,  44,  43,  45,
				-24, -39,  -5,   1, -16,  57,  28,  54,
				-13, -17,   7,   8,  29,  56,  47,  57,
				-27, -27, -16, -16,  -1,  17,  -2,   1,
				-9, -26,  -9, -10,  -2,  -4,   3,  -3,
				-14,   2, -11,  -2,  -5,   2,  14,   5,
				-35,  -8,  11,   2,   8,  15,  -3,   1,
				-1, -18,  -9,  10, -15, -25, -31, -50,

				-65,  23,  16, -15, -56, -34,   2,  13,
				29,  -1, -20,  -7,  -8,  -4, -38, -29,
				-9,  24,   2, -16, -20,   6,  22, -22,
				-17, -20, -12, -27, -30, -25, -14, -36,
				-49,  -1, -27, -39, -46, -44, -33, -51,
				-14, -14, -22, -46, -44, -30, -15, -27,
				1,   7,  -8, -64, -43, -16,   9,   8,
				-15,  36,  12, -54,   8, -28,  24,  14,

				0,   0,   0,   0,   0,   0

		};

		static short[] eg_table = {
				0,   0,   0,   0,   0,   0,   0,   0,
				178, 173, 158, 134, 147, 132, 165, 187,
				94, 100,  85,  67,  56,  53,  82,  84,
				32,  24,  13,   5,  -2,   4,  17,  17,
				13,   9,  -3,  -7,  -7,  -8,   3,  -1,
				4,   7,  -6,   1,   0,  -5,  -1,  -8,
				13,   8,   8,  10,  13,   0,   2,  -7,
				0,   0,   0,   0,   0,   0,   0,   0,

				-58, -38, -13, -28, -31, -27, -63, -99,
				-25,  -8, -25,  -2,  -9, -25, -24, -52,
				-24, -20,  10,   9,  -1,  -9, -19, -41,
				-17,   3,  22,  22,  22,  11,   8, -18,
				-18,  -6,  16,  25,  16,  17,   4, -18,
				-23,  -3,  -1,  15,  10,  -3, -20, -22,
				-42, -20, -10,  -5,  -2, -20, -23, -44,
				-29, -51, -23, -15, -22, -18, -50, -64,

				-14, -21, -11,  -8, -7,  -9, -17, -24,
				-8,  -4,   7, -12, -3, -13,  -4, -14,
				2,  -8,   0,  -1, -2,   6,   0,   4,
				-3,   9,  12,   9, 14,  10,   3,   2,
				-6,   3,  13,  19,  7,  10,  -3,  -9,
				-12,  -3,   8,  10, 13,   3,  -7, -15,
				-14, -18,  -7,  -1,  4,  -9, -15, -27,
				-23,  -9, -23,  -5, -9, -16,  -5, -17,

				13, 10, 18, 15, 12,  12,   8,   5,
				11, 13, 13, 11, -3,   3,   8,   3,
				7,  7,  7,  5,  4,  -3,  -5,  -3,
				4,  3, 13,  1,  2,   1,  -1,   2,
				3,  5,  8,  4, -5,  -6,  -8, -11,
				-4,  0, -5, -1, -7, -12,  -8, -16,
				-6, -6,  0,  2, -9,  -9, -11,  -3,
				-9,  2,  3, -1, -5, -13,   4, -20,

				-9,  22,  22,  27,  27,  19,  10,  20,
				-17,  20,  32,  41,  58,  25,  30,   0,
				-20,   6,   9,  49,  47,  35,  19,   9,
				3,  22,  24,  45,  57,  40,  57,  36,
				-18,  28,  19,  47,  31,  34,  39,  23,
				-16, -27,  15,   6,   9,  17,  10,   5,
				-22, -23, -30, -16, -16, -23, -36, -32,
				-33, -28, -22, -43,  -5, -32, -20, -41,

				-74, -35, -18, -18, -11,  15,   4, -17,
				-12,  17,  14,  17,  17,  38,  23,  11,
				10,  17,  23,  15,  20,  45,  44,  13,
				-8,  22,  24,  27,  26,  33,  26,   3,
				-18,  -4,  21,  24,  27,  23,   9, -11,
				-19,  -3,  11,  21,  23,  16,   7,  -9,
				-27, -11,   4,  13,  14,   4,  -5, -17,
				-53, -34, -21, -11, -28, -14, -24, -43,

				0,   0,   0,   0,   0,   0,  // extra 6 0s to make 384 -> 390, since 64 * 6 does not fit perfectly
		};

		public static decimal Encode(bool[] signs, byte[] values)
		{
			if (signs.Length != 10 || values.Length != 10)
				throw new ArgumentException("Both signs and values arrays must be of length 10.");

			BigInteger result = 0;
			for (int i = 0; i < 10; i++)
			{
				BigInteger current = values[i];
				if (signs[i])
					current |= 1 << 8;  // Set the sign bit if it's true.

				result |= current << (9 * i);
			}

			decimal ans;
			Decimal.TryParse(result.ToString(), out ans);

			return ans;
		}

		public static short Decode(decimal dInput, int index)
		{
			BigInteger encodedValue = BigInteger.Parse(dInput.ToString());

			int shiftAmount = 9 * index;

			BigInteger segment = (encodedValue >> shiftAmount) & 0x1FF;

			bool sign = (segment & (1 << 8)) != 0;
			byte byteValue = (byte)(segment & 0xFF);

			return (short)(byteValue * (sign ? -1 : 1));
		}

		// Test method
		public static void Test()
		{
			short[] testValues = { 98, 134, 61, 95, 68, 126, 34, -11, -6, 7 };
			byte[] data = new byte[10];
			bool[] signs = new bool[10];

			for (int i = 0; i < 10; i++)
			{
				data[i] = (byte)Math.Abs(testValues[i]);
				signs[i] = testValues[i] < 0;

				Console.WriteLine("Processing " + testValues[i] + " as " + data[i] + " and " + signs[i]);
			}

			decimal encoded = Encode(signs, data);

			Console.WriteLine($"Encoded value: {encoded}");

			for (int i = 0; i < 10; i++)
			{
				short decoded = Decode(encoded, i);
				Console.WriteLine($"Decoded value at index {i}: {decoded}");
			}
		}

		public static void Consolidate()
		{
			decimal[] output = new decimal[mg_table.Length / 10];

			Console.Write(mg_table.Length + "{");

			for (int i = 0; i < mg_table.Length / 10; i++) {
				byte[] cur_vals = new byte[10];
				bool[] cur_parity = new bool[10];

				for (int j = 0; j < 10; j++) {
					cur_vals[j] = (byte)Math.Abs(mg_table[i * 10 + j]);
					cur_parity[j] = mg_table[i * 10 + j] < 0;
				}

				output[i] = Encode(cur_parity, cur_vals);

				Console.Write(output[i] + "m, ");
			}

			Console.WriteLine("}");
		}
	}
}

